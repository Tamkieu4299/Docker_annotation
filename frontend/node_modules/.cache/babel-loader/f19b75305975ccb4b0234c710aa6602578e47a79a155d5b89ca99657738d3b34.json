{"ast":null,"code":"var _jsxFileName = \"/Users/tamkieu/Desktop/deltacognition/frontend/src/components/canvasinit/Canvasinit.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Canvasinit(_ref) {\n  _s();\n  let {\n    image_path\n  } = _ref;\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n  const [drawing, setDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  useEffect(() => {\n    const c = document.getElementById(image_path);\n    const ctx = c.getContext(\"2d\");\n    var imageObj1 = new Image();\n    imageObj1.src = PF + image_path;\n    imageObj1.onload = function () {\n      ctx.drawImage(imageObj1, 0, 0);\n    };\n  }, []);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    // For supporting computers with higher screen densities, we double the screen density\n    // canvas.width = window.innerWidth * 2;\n    // canvas.height = window.innerHeight * 2;\n    // canvas.style.width = `1000`;\n    // canvas.style.height = `500`;\n    // Setting the context to enable us draw\n    const ctx = canvas.getContext('2d');\n    // ctx.scale(2, 2);\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'red';\n    // ctx.lineWidth = 20;\n    ctxRef.current = ctx;\n  }, image_path);\n  const addPoint = () => {\n    const ctx = document.getElementById(image_path).getContext(\"2d\");\n    ctx.beginPath();\n    ctx.lineWidth = \"10\";\n    ctx.strokeStyle = \"blue\";\n    ctx.rect(50, 50, 150, 80);\n    ctx.stroke();\n    // var imageObj1 = new Image();\n    // imageObj1.src = PF + image_path;\n    // imageObj1.onload = function () {\n    // ctx.drawImage(imageObj1,0,0);\n  };\n\n  const handleCursorMovement = event => {\n    let rect = event.target.getBoundingClientRect();\n    let x = event.clientX - rect.left;\n    let y = event.clientY - rect.top;\n    const ctx = document.getElementById(image_path).getContext(\"2d\");\n    ctx === null || ctx === void 0 ? void 0 : ctx.strokeRect(x, y, 40, 50);\n  };\n  const startDraw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(offsetX, offsetY);\n    setDrawing(true);\n  };\n  const stopDraw = () => {\n    ctxRef.current.closePath();\n    setDrawing(false);\n  };\n  const draw = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n    if (!drawing) return;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    // ctxRef.current.lineTo(offsetX, offsetY);\n    ctxRef.current.rect(offsetX, offsetY, 40, 50);\n  };\n  const clear = () => {\n    ctxRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: image_path,\n      width: \"1000\",\n      height: \"300\",\n      style: {\n        border: \"1px solid #d3d3d3\"\n      },\n      onMouseDown: startDraw,\n      onMouseUp: stopDraw,\n      onMouseMove: draw\n      // onClick={handleCursorMovement()}\n      ,\n      children: \"Your browser does not support the HTML canvas tag.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => clear(),\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(Canvasinit, \"G8Flraziqx9st4hp/6ddLNY9P04=\");\n_c = Canvasinit;\nvar _c;\n$RefreshReg$(_c, \"Canvasinit\");","map":{"version":3,"names":["useEffect","useState","useContext","useRef","Canvasinit","image_path","PF","process","env","REACT_APP_PUBLIC_FOLDER","drawing","setDrawing","canvasRef","ctxRef","c","document","getElementById","ctx","getContext","imageObj1","Image","src","onload","drawImage","canvas","current","lineCap","strokeStyle","addPoint","beginPath","lineWidth","rect","stroke","handleCursorMovement","event","target","getBoundingClientRect","x","clientX","left","y","clientY","top","strokeRect","startDraw","nativeEvent","offsetX","offsetY","moveTo","stopDraw","closePath","draw","clear","clearRect","width","height","border"],"sources":["/Users/tamkieu/Desktop/deltacognition/frontend/src/components/canvasinit/Canvasinit.jsx"],"sourcesContent":["import { useEffect, useState, useContext, useRef } from \"react\";\n\nexport default function Canvasinit({ image_path }) {\n    const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n    const [drawing, setDrawing] = useState(false);\n    const canvasRef = useRef(null);\n    const ctxRef = useRef(null);\n    useEffect(() => {\n        const c = document.getElementById(image_path);\n        const ctx = c.getContext(\"2d\");\n        var imageObj1 = new Image();\n        imageObj1.src = PF + image_path;\n        imageObj1.onload = function () {\n            ctx.drawImage(imageObj1, 0, 0);\n        };\n    }, []);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        // For supporting computers with higher screen densities, we double the screen density\n        // canvas.width = window.innerWidth * 2;\n        // canvas.height = window.innerHeight * 2;\n        // canvas.style.width = `1000`;\n        // canvas.style.height = `500`;\n        // Setting the context to enable us draw\n        const ctx = canvas.getContext('2d');\n        // ctx.scale(2, 2);\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'red';\n        // ctx.lineWidth = 20;\n        ctxRef.current = ctx;\n      }, image_path);\n\n    const addPoint = () => {\n        const ctx = document.getElementById(image_path).getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = \"10\";\n        ctx.strokeStyle = \"blue\";\n        ctx.rect(50, 50, 150, 80);\n        ctx.stroke();\n        // var imageObj1 = new Image();\n        // imageObj1.src = PF + image_path;\n        // imageObj1.onload = function () {\n            // ctx.drawImage(imageObj1,0,0);\n    };\n\n    const handleCursorMovement = (event) => {\n        let rect = event.target.getBoundingClientRect();\n        let x = event.clientX - rect.left\n        let y =  event.clientY - rect.top\n        const ctx = document.getElementById(image_path).getContext(\"2d\");\n        ctx?.strokeRect(x, y, 40, 50);\n    }\n\n    const startDraw = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent;\n        ctxRef.current.beginPath();\n        ctxRef.current.moveTo(offsetX, offsetY);\n        setDrawing(true);\n      };\n      const stopDraw = () => {\n        ctxRef.current.closePath();\n        setDrawing(false);\n      };\n      const draw = ({ nativeEvent }) => {\n        if (!drawing) return;\n        const { offsetX, offsetY } = nativeEvent;\n        // ctxRef.current.lineTo(offsetX, offsetY);\n        ctxRef.current.rect(offsetX, offsetY, 40, 50);\n      };\n      const clear = () => {\n        ctxRef.current.clearRect(\n          0,\n          0,\n          canvasRef.current.width,\n          canvasRef.current.height\n        );\n      };\n    return (\n        <div>\n            <canvas\n                ref={canvasRef}\n                id={image_path}\n                width=\"1000\"\n                height=\"300\"\n                style={{ border: \"1px solid #d3d3d3\" }}\n                onMouseDown={startDraw}\n                onMouseUp={stopDraw}\n                onMouseMove={draw}\n                // onClick={handleCursorMovement()}\n            >\n                Your browser does not support the HTML canvas tag.\n            </canvas>\n            {/* <canvas\n                onMouseDown={startDraw}\n                onMouseUp={stopDraw}\n                onMouseMove={draw}\n                ref={canvasRef}\n            /> */}\n            <br />\n            <button onClick={() => clear()}>Clear</button>\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}