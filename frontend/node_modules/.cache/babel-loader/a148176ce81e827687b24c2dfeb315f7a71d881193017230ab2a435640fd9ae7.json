{"ast":null,"code":"var _jsxFileName = \"/Users/tamkieu/Desktop/deltacognition/frontend/src/components/canvasinit/Canvasinit.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Canvasinit(_ref) {\n  _s();\n  let {\n    post,\n    image_path\n  } = _ref;\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n  const [drawing, setDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const {\n    user\n  } = useContext(AuthContext);\n  useEffect(() => {\n    // console.log(anno_arr)\n    const c = document.getElementById(image_path);\n    const ctx = c.getContext(\"2d\");\n    var imageObj1 = new Image();\n    imageObj1.src = PF + image_path;\n    imageObj1.onload = function () {\n      ctx.drawImage(imageObj1, 0, 0);\n      if (post.id === user.id && post.annotation_path !== \"\") {\n        const anno_arr = post.annotation_path.split(\"/\");\n        for (const xy of anno_arr) {\n          const xy_arr = xy.split(',');\n          ctx.strokeRect(parseInt(xy_arr[0]), parseInt(xy_arr[1]), 60, 80);\n        }\n      }\n    };\n  }, [image_path, PF]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    // For supporting computers with higher screen densities, we double the screen density\n    // canvas.width = window.innerWidth * 2;\n    // canvas.height = window.innerHeight * 2;\n    // canvas.style.width = `1000`;\n    // canvas.style.height = `500`;\n    // Setting the context to enable us draw\n    const ctx = canvas.getContext('2d');\n    // ctx.scale(2, 2);\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 10;\n    ctxRef.current = ctx;\n  }, [image_path]);\n  const addPoint = () => {\n    const ctx = document.getElementById(image_path).getContext(\"2d\");\n    ctx.beginPath();\n    ctx.lineWidth = \"10\";\n    ctx.strokeStyle = \"blue\";\n    ctx.rect(50, 50, 150, 80);\n    // ctx.stroke();\n    // var imageObj1 = new Image();\n    // imageObj1.src = PF + image_path;\n    // imageObj1.onload = function () {\n    // ctx.drawImage(imageObj1,0,0);\n  };\n\n  // const handleCursorMovement = (event) => {\n  //     let rect = event.target.getBoundingClientRect();\n  //     let x = event.clientX - rect.left\n  //     let y =  event.clientY - rect.top\n  //     const ctx = document.getElementById(image_path).getContext(\"2d\");\n  //     ctx?.strokeRect(x, y, 40, 50);\n  // }\n\n  const startDraw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(offsetX, offsetY);\n    setDrawing(true);\n  };\n  const stopDraw = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n    ctxRef.current.closePath();\n    if (!drawing) return;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    // ctxRef.current.lineTo(offsetX, offsetY);\n    ctxRef.current.strokeRect(offsetX, offsetY, 60, 80);\n    console.log(offsetX, offsetY);\n    setDrawing(false);\n  };\n  const clear = () => {\n    ctxRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: image_path,\n      width: \"1000\",\n      height: \"300\",\n      style: {\n        border: \"1px solid #d3d3d3\"\n      },\n      onMouseDown: startDraw,\n      onMouseUp: stopDraw\n      // onClick={handleCursorMovement()}\n      ,\n      children: \"Your browser does not support the HTML canvas tag.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => clear(),\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(Canvasinit, \"hLTnsWBtj07Y4S7LZBp+A5NeNqI=\");\n_c = Canvasinit;\nvar _c;\n$RefreshReg$(_c, \"Canvasinit\");","map":{"version":3,"names":["useEffect","useState","useContext","useRef","AuthContext","Canvasinit","post","image_path","PF","process","env","REACT_APP_PUBLIC_FOLDER","drawing","setDrawing","canvasRef","ctxRef","user","c","document","getElementById","ctx","getContext","imageObj1","Image","src","onload","drawImage","id","annotation_path","anno_arr","split","xy","xy_arr","strokeRect","parseInt","canvas","current","lineCap","strokeStyle","lineWidth","addPoint","beginPath","rect","startDraw","nativeEvent","offsetX","offsetY","moveTo","stopDraw","closePath","console","log","clear","clearRect","width","height","border"],"sources":["/Users/tamkieu/Desktop/deltacognition/frontend/src/components/canvasinit/Canvasinit.jsx"],"sourcesContent":["import { useEffect, useState, useContext, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\n\nexport default function Canvasinit({post, image_path }) {\n    const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n    const [drawing, setDrawing] = useState(false);\n    const canvasRef = useRef(null);\n    const ctxRef = useRef(null);\n    const { user } = useContext(AuthContext);\n    useEffect(() => {\n        // console.log(anno_arr)\n        const c = document.getElementById(image_path);\n        const ctx = c.getContext(\"2d\");\n        var imageObj1 = new Image();\n        imageObj1.src = PF + image_path;\n        imageObj1.onload = function () {\n            ctx.drawImage(imageObj1, 0, 0);\n            if(post.id===user.id && post.annotation_path!==\"\"){\n                const anno_arr = post.annotation_path.split(\"/\") \n                for(const xy of anno_arr){\n                    const xy_arr = xy.split(',')\n                    ctx.strokeRect(parseInt(xy_arr[0]), parseInt(xy_arr[1]), 60, 80);\n                }\n            }\n        };\n    }, [image_path, PF]);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        // For supporting computers with higher screen densities, we double the screen density\n        // canvas.width = window.innerWidth * 2;\n        // canvas.height = window.innerHeight * 2;\n        // canvas.style.width = `1000`;\n        // canvas.style.height = `500`;\n        // Setting the context to enable us draw\n        const ctx = canvas.getContext('2d');\n        // ctx.scale(2, 2);\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = 'red';\n        ctx.lineWidth = 10;\n        ctxRef.current = ctx;\n      }, [image_path]);\n\n    const addPoint = () => {\n        const ctx = document.getElementById(image_path).getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = \"10\";\n        ctx.strokeStyle = \"blue\";\n        ctx.rect(50, 50, 150, 80);\n        // ctx.stroke();\n        // var imageObj1 = new Image();\n        // imageObj1.src = PF + image_path;\n        // imageObj1.onload = function () {\n            // ctx.drawImage(imageObj1,0,0);\n    };\n\n    // const handleCursorMovement = (event) => {\n    //     let rect = event.target.getBoundingClientRect();\n    //     let x = event.clientX - rect.left\n    //     let y =  event.clientY - rect.top\n    //     const ctx = document.getElementById(image_path).getContext(\"2d\");\n    //     ctx?.strokeRect(x, y, 40, 50);\n    // }\n\n    const startDraw = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent;\n        ctxRef.current.beginPath();\n        ctxRef.current.moveTo(offsetX, offsetY);\n        setDrawing(true);\n      };\n      const stopDraw = ({ nativeEvent }) => {\n        ctxRef.current.closePath();\n        if (!drawing) return;\n        const { offsetX, offsetY } = nativeEvent;\n        // ctxRef.current.lineTo(offsetX, offsetY);\n        ctxRef.current.strokeRect(offsetX, offsetY, 60, 80);\n        console.log(offsetX, offsetY)\n        setDrawing(false);\n      };\n      const clear = () => {\n        ctxRef.current.clearRect(\n          0,\n          0,\n          canvasRef.current.width,\n          canvasRef.current.height\n        );\n      };\n    return (\n        <div>\n            <canvas\n                ref={canvasRef}\n                id={image_path}\n                width=\"1000\"\n                height=\"300\"\n                style={{ border: \"1px solid #d3d3d3\" }}\n                onMouseDown={startDraw}\n                onMouseUp={stopDraw}\n                // onClick={handleCursorMovement()}\n            >\n                Your browser does not support the HTML canvas tag.\n            </canvas>\n            {/* <canvas\n                onMouseDown={startDraw}\n                onMouseUp={stopDraw}\n                onMouseMove={draw}\n                ref={canvasRef}\n            /> */}\n            <br />\n            <button onClick={() => clear()}>Clear</button>\n        </div>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}